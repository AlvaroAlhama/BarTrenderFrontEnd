# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestRegisterOwner():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_registerOwnerErrors(self):
    self.driver.get("https://bartrender-develop-sprint-01.netlify.app")
    self.driver.set_window_size(1051, 728)
    self.driver.find_element(By.CSS_SELECTOR, "#signup-tooltip > #login-tooltip").click()
    self.driver.find_element(By.ID, "email").send_keys("miggar@gmail.com")
    self.driver.find_element(By.NAME, "password").send_keys("vekto1234")
    self.driver.find_element(By.CSS_SELECTOR, "#establishmentUserForm #email").send_keys("miggar@gmail.com")
    self.driver.find_element(By.CSS_SELECTOR, "#establishmentUserForm .form-group:nth-child(2) > .form-control").send_keys("vekto1234")
    self.driver.find_element(By.CSS_SELECTOR, ".active > .fal").click()
    self.driver.find_element(By.CSS_SELECTOR, ".modal").click()
    self.driver.find_element(By.CSS_SELECTOR, "#establishmentUserForm #email").send_keys("ownerTest")
    self.driver.find_element(By.NAME, "phone").send_keys("6")
    self.driver.find_element(By.CSS_SELECTOR, "#establishmentUserForm .btn").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "#establishmentUserForm .my-1 > .text-danger")== "Escriba una dirección de correo electrónico correcta."
    assert self.driver.find_element(By.CSS_SELECTOR, "#establishmentUserForm form > .text-danger") == "La contraseña debe tener al menos 8 carácteres, un dígito, una mayúscula y un carácter especial."
    assert self.driver.find_element(By.CSS_SELECTOR, "#establishmentUserForm .my-4 > .text-danger")== "Escriba un número de teléfono correcto."
  
  def test_registerOwnerCorrect(self):
    self.driver.get("http://localhost:3000/main")
    self.driver.set_window_size(1051, 728)
    self.driver.find_element(By.CSS_SELECTOR, "#signup-tooltip > #login-tooltip").click()
    self.driver.find_element(By.ID, "email").send_keys("miggar@gmail.com")
    self.driver.find_element(By.NAME, "password").send_keys("vekto1234")
    self.driver.find_element(By.CSS_SELECTOR, "#establishmentUserForm #email").send_keys("miggar@gmail.com")
    self.driver.find_element(By.CSS_SELECTOR, "#establishmentUserForm .form-group:nth-child(2) > .form-control").send_keys("vekto1234")
    self.driver.find_element(By.CSS_SELECTOR, ".active > .fal").click()
    self.driver.find_element(By.CSS_SELECTOR, ".modal").click()
    self.driver.find_element(By.CSS_SELECTOR, "#establishmentUserForm #email").send_keys("ownertest@gmail.com")
    self.driver.find_element(By.CSS_SELECTOR, "#establishmentUserForm .form-group:nth-child(2) > .form-control").send_keys("vekto1234$A")
    self.driver.find_element(By.NAME, "phone").send_keys("654654654")
    self.driver.find_element(By.NAME, "phone").send_keys(Keys.ENTER)
    elements = self.driver.find_elements(By.ID, "logout-tooltip")
    assert len(elements) > 0
  